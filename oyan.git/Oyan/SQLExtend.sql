CREATE TABLE `OYAN`.`PLATFORMS` (
    `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `NAME` VARCHAR(45) NOT NULL,
    PRIMARY KEY (`ID`),
    UNIQUE INDEX `NAME_UNIQUE` (`NAME` ASC)
);

INSERT into  `OYAN`.`PLATFORMS` (`NAME`) values('ANDROID');
INSERT into  `OYAN`.`PLATFORMS` (`NAME`) values('IOS');

CREATE TABLE `OYAN`.`DEVICES` (
    `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `NAME` VARCHAR(45) NULL,
	`PLATFORM_ID` INT UNSIGNED NOT NULL,
	`PUSH_TOKEN` VARCHAR(500) NOT NULL,
	`OS_VERSION`  VARCHAR(100) NULL,
	`APP_VERSION` VARCHAR(45) NULL,
	`SANDBOX` BIT NOT NULL,

    PRIMARY KEY (`ID`)
);

ALTER TABLE `OYAN`.`DEVICES`
ADD INDEX `FK_PLATFORM_ID_idx` (`PLATFORM_ID` ASC);

ALTER TABLE `OYAN`.`DEVICES` 
ADD CONSTRAINT `FK_PLATFORM_ID`
  FOREIGN KEY (`PLATFORM_ID`)
  REFERENCES `OYAN`.`PLATFORMS` (`ID`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;
  
INSERT into  `OYAN`.`DEVICES` (`NAME`, `PLATFORM_ID`, PUSH_TOKEN, SANDBOX) values('NOT-SPECIFIED', 1, 'NOT-SPECIFIED', 0);

ALTER TABLE `OYAN`.`USERS`
ADD COLUMN `DEVICE_ID` INT UNSIGNED NOT NULL DEFAULT 1;

ALTER TABLE `OYAN`.`USERS`
ADD INDEX `FK_DEVICE_ID_idx` (`DEVICE_ID` ASC);

ALTER TABLE `OYAN`.`USERS` 
ADD CONSTRAINT `FK_DEVICE_ID`
  FOREIGN KEY (`DEVICE_ID`)
  REFERENCES `OYAN`.`DEVICES` (`ID`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;

  
DELIMITER ;;
DROP PROCEDURE IF EXISTS UPDATE_DEVICE_INFO;;
Create procedure `UPDATE_DEVICE_INFO` (
_USER_ID INT,
_NAME VARCHAR(45),
_PLATFORM_ID INT,
_PUSH_TOKEN VARCHAR(500),
_OS_VERSION  VARCHAR(100),
_APP_VERSION VARCHAR(45),
_SANDBOX BIT
)
 BEGIN
 DECLARE _DEVICE_ID INT;
SELECT 
    DEVICE_ID
INTO _DEVICE_ID FROM
    OYAN.USERS
WHERE
    ID = _USER_ID;
 
 IF (_DEVICE_ID = 1)  THEN
BEGIN
 INSERT into  OYAN.DEVICES (NAME, PLATFORM_ID, PUSH_TOKEN, OS_VERSION, APP_VERSION, SANDBOX)
 values(_NAME, _PLATFORM_ID, _PUSH_TOKEN, _OS_VERSION, _APP_VERSION, _SANDBOX);
 
UPDATE OYAN.USERS 
SET 
    DEVICE_ID = LAST_INSERT_ID()
WHERE
    ID = _USER_ID;
 END;
 ELSE
 UPDATE OYAN.DEVICES 
 set
NAME=_NAME,
PLATFORM_ID=_PLATFORM_ID,
PUSH_TOKEN =_PUSH_TOKEN,
OS_VERSION =_OS_VERSION,
APP_VERSION=_APP_VERSION,
SANDBOX = _SANDBOX

where ID = _DEVICE_ID;
END IF;
END;;

DROP PROCEDURE IF EXISTS GET_DEVICE_INFO;;
Create procedure `GET_DEVICE_INFO` (
_USER_ID INT
)
begin
SELECT NAME, PLATFORM_ID, PUSH_TOKEN, OS_VERSION, APP_VERSION, SANDBOX from OYAN.DEVICES 
    where ID = (select DEVICE_ID from OYAN.USERS where ID = _USER_ID);
END;;

DROP PROCEDURE IF EXISTS GET_USER_ID_BY_TOKEN;;
Create procedure `GET_USER_ID_BY_TOKEN` (
_NOT_USED_INT INT,
_TOKEN varchar(100)
)
begin
SELECT USER_ID from OYAN.TOKENS 
    where  TOKEN = _TOKEN;
END;;

DROP PROCEDURE IF EXISTS GET_DEVICE_INFO_BY_SIP_ID;;
Create procedure `GET_DEVICE_INFO_BY_SIP_ID` (
_NOT_USED_INT INT,
_SIP_ID INT
)
begin
SELECT NAME, PLATFORM_ID, PUSH_TOKEN, OS_VERSION, APP_VERSION, SANDBOX from OYAN.DEVICES 
    where ID = (select DEVICE_ID from OYAN.USERS where  SIP_USERNAME = _SIP_ID);
END;;

DROP PROCEDURE IF EXISTS GET_USER_ID_BY_TOKEN;;
Create procedure `GET_USER_ID_BY_TOKEN` (
_NOT_USED_INT INT,
_TOKEN varchar(100)
)
begin
SELECT USER_ID from OYAN.TOKENS 
    where  TOKEN = _TOKEN;
END;;
DELIMITER ;

DROP procedure IF EXISTS `GET_USER_BY_SIP_ID`;
DELIMITER $$
USE `OYAN`$$
CREATE DEFINER=`oyan`@`%` PROCEDURE `GET_USER_BY_SIP_ID`(
	SIP_USERNAME LONG)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN 
		
    
    END;
    SELECT ID, FULLNAME, PHOTO_NAME FROM USERS WHERE USERS.SIP_USERNAME = SIP_USERNAME; 
END$$

DELIMITER ;

